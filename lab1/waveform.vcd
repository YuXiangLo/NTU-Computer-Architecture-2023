$date
	Fri Nov  3 14:46:18 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! Clk $end
$var reg 1 " Reset $end
$var integer 32 # counter [31:0] $end
$var integer 32 $ i [31:0] $end
$var integer 32 % outfile [31:0] $end
$scope module CPU $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 32 & rs2_data_o [31:0] $end
$var wire 5 ' rs2_addr_i [4:0] $end
$var wire 32 ( rs1_data_o [31:0] $end
$var wire 5 ) rs1_addr_i [4:0] $end
$var wire 32 * rd_data_i [31:0] $end
$var wire 5 + rd_addr_i [4:0] $end
$var wire 32 , pc_o [31:0] $end
$var wire 32 - pc_i [31:0] $end
$var wire 7 . opcode [6:0] $end
$var wire 32 / instr_o [31:0] $end
$var wire 32 0 imm_o [31:0] $end
$var wire 12 1 imm_i [11:0] $end
$var wire 1 2 RegWrite_o $end
$var wire 1 3 ALUSrc_o $end
$var wire 2 4 ALUOp_o [1:0] $end
$var wire 32 5 ALUData_i [31:0] $end
$var wire 3 6 ALUCtrl_o [2:0] $end
$var wire 10 7 ALUCtrl_i [9:0] $end
$scope module ALU $end
$var wire 32 8 data_o [31:0] $end
$var wire 32 9 data2_i [31:0] $end
$var wire 32 : data1_i [31:0] $end
$var wire 3 ; ALUCtrl_i [2:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 10 < ALUCtrl_i [9:0] $end
$var wire 2 = ALUOp_i [1:0] $end
$var wire 3 > ALUCtrl_o [2:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 ? imm_i [31:0] $end
$var wire 32 @ pc_o [31:0] $end
$var wire 32 A pc_i [31:0] $end
$upscope $end
$scope module Control $end
$var wire 7 B Op_i [6:0] $end
$var wire 1 2 RegWrite_o $end
$var wire 1 3 ALUSrc_o $end
$var wire 2 C ALUOp_o [1:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 D instr_o [31:0] $end
$var wire 32 E addr_i [31:0] $end
$upscope $end
$scope module MUX_ALUSrc $end
$var wire 1 3 ALUSrc_i $end
$var wire 32 F rs2_data_i [31:0] $end
$var wire 32 G imm_i [31:0] $end
$var wire 32 H ALUData_o [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 I pc_i [31:0] $end
$var wire 1 " rst_i $end
$var reg 32 J pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 K RDaddr_i [4:0] $end
$var wire 32 L RDdata_i [31:0] $end
$var wire 5 M RS1addr_i [4:0] $end
$var wire 32 N RS1data_o [31:0] $end
$var wire 5 O RS2addr_i [4:0] $end
$var wire 32 P RS2data_o [31:0] $end
$var wire 1 2 RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var integer 32 Q i [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 12 R imm_i [11:0] $end
$var wire 32 S imm_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 S
b0 R
b100000 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b100 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b100 @
b100 ?
b110 >
b0 =
b0 <
b110 ;
b0 :
b0 9
b0 8
b0 7
b110 6
b0 5
b0 4
03
02
b0 1
b0 0
b0 /
b0 .
b100 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b11 %
b100000000 $
b0 #
0"
0!
$end
#12
1"
#25
b1000 -
b1000 @
b1000 I
b100 ,
b100 A
b100 E
b100 J
b1 #
1!
#50
0!
#75
b1100 -
b1100 @
b1100 I
b1000 ,
b1000 A
b1000 E
b1000 J
b10 #
1!
#100
0!
#125
b10000 -
b10000 @
b10000 I
b1100 ,
b1100 A
b1100 E
b1100 J
b11 #
1!
#150
0!
#175
b10100 -
b10100 @
b10100 I
b10000 ,
b10000 A
b10000 E
b10000 J
b100 #
1!
#200
0!
#225
b11000 -
b11000 @
b11000 I
b10100 ,
b10100 A
b10100 E
b10100 J
b101 #
1!
#250
0!
#275
b11100 -
b11100 @
b11100 I
b11000 ,
b11000 A
b11000 E
b11000 J
b110 #
1!
#300
0!
#325
b100000 -
b100000 @
b100000 I
b11100 ,
b11100 A
b11100 E
b11100 J
b111 #
1!
#350
0!
#375
b100100 -
b100100 @
b100100 I
b100000 ,
b100000 A
b100000 E
b100000 J
b1000 #
1!
#400
0!
#425
b101000 -
b101000 @
b101000 I
b100100 ,
b100100 A
b100100 E
b100100 J
b1001 #
1!
#450
0!
#475
b101100 -
b101100 @
b101100 I
b101000 ,
b101000 A
b101000 E
b101000 J
b1010 #
1!
#500
0!
#525
b110000 -
b110000 @
b110000 I
b101100 ,
b101100 A
b101100 E
b101100 J
b1011 #
1!
#550
0!
#575
b110100 -
b110100 @
b110100 I
b110000 ,
b110000 A
b110000 E
b110000 J
b1100 #
1!
#600
0!
#625
b111000 -
b111000 @
b111000 I
b110100 ,
b110100 A
b110100 E
b110100 J
b1101 #
1!
#650
0!
#675
b111100 -
b111100 @
b111100 I
b111000 ,
b111000 A
b111000 E
b111000 J
b1110 #
1!
#700
0!
#725
b1000000 -
b1000000 @
b1000000 I
b111100 ,
b111100 A
b111100 E
b111100 J
b1111 #
1!
#750
0!
#775
b1000100 -
b1000100 @
b1000100 I
b1000000 ,
b1000000 A
b1000000 E
b1000000 J
b10000 #
1!
#800
0!
#825
b1001000 -
b1001000 @
b1001000 I
b1000100 ,
b1000100 A
b1000100 E
b1000100 J
b10001 #
1!
#850
0!
#875
b1001100 -
b1001100 @
b1001100 I
b1001000 ,
b1001000 A
b1001000 E
b1001000 J
b10010 #
1!
#900
0!
#925
b1010000 -
b1010000 @
b1010000 I
b1001100 ,
b1001100 A
b1001100 E
b1001100 J
b10011 #
1!
#950
0!
#975
b1010100 -
b1010100 @
b1010100 I
b1010000 ,
b1010000 A
b1010000 E
b1010000 J
b10100 #
1!
#1000
0!
#1025
b1011000 -
b1011000 @
b1011000 I
b1010100 ,
b1010100 A
b1010100 E
b1010100 J
b10101 #
1!
#1050
0!
#1075
b1011100 -
b1011100 @
b1011100 I
b1011000 ,
b1011000 A
b1011000 E
b1011000 J
b10110 #
1!
#1100
0!
#1125
b1100000 -
b1100000 @
b1100000 I
b1011100 ,
b1011100 A
b1011100 E
b1011100 J
b10111 #
1!
#1150
0!
#1175
b1100100 -
b1100100 @
b1100100 I
b1100000 ,
b1100000 A
b1100000 E
b1100000 J
b11000 #
1!
#1200
0!
#1225
b1101000 -
b1101000 @
b1101000 I
b1100100 ,
b1100100 A
b1100100 E
b1100100 J
b11001 #
1!
#1250
0!
#1275
b1101100 -
b1101100 @
b1101100 I
b1101000 ,
b1101000 A
b1101000 E
b1101000 J
b11010 #
1!
#1300
0!
#1325
b1110000 -
b1110000 @
b1110000 I
b1101100 ,
b1101100 A
b1101100 E
b1101100 J
b11011 #
1!
#1350
0!
#1375
b1110100 -
b1110100 @
b1110100 I
b1110000 ,
b1110000 A
b1110000 E
b1110000 J
b11100 #
1!
#1400
0!
#1425
b1111000 -
b1111000 @
b1111000 I
b1110100 ,
b1110100 A
b1110100 E
b1110100 J
b11101 #
1!
#1450
0!
#1475
b1111100 -
b1111100 @
b1111100 I
b1111000 ,
b1111000 A
b1111000 E
b1111000 J
b11110 #
1!
#1500
0!
#1525
b10000000 -
b10000000 @
b10000000 I
b1111100 ,
b1111100 A
b1111100 E
b1111100 J
1!
